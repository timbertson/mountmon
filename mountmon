#!/usr/bin/env python

import dbus
import gobject
import time
import sys
import subprocess
import os

import logging
LOG_FILE = '/tmp/mountmon.log'
logging.basicConfig(filename=LOG_FILE, level=logging.DEBUG)
debug = logging.debug
puts = logging.info
output = logging.getLogger('subcommand').debug

sys.path.insert(0, os.path.expanduser("~/.config/mountmon"))
from mountmon_config import mapping

class Monitor():
	HAL = "org.freedesktop.Hal"
	def __init__(self):
		puts("loaded %s mappings" % (len(mapping),))
		self.bus = dbus.SystemBus()
		self.hal_manager = self.bus.get_object(self.HAL, "/org/freedesktop/Hal/Manager")
		self.hal_service = dbus.Interface(self.hal_manager, self.HAL + ".Manager")

		self.bus.add_signal_receiver(self.gdl_added,
			"DeviceAdded",
			self.HAL + ".Manager",
			self.HAL,
			"/org/freedesktop/Hal/Manager")

		for device_udi in self.hal_service.FindDeviceByCapability("volume"):
			self.device_added(device_udi)

	def gdl_added(self, device_udi):
		"""This method is called when a HAL device is added"""
		puts("device added: %r" % (device_udi,))
		self.device_added(device_udi)
	
	def action_for_device(self, device):
		for match, action in mapping.items():
			try:
				if match(device):
					return action
			except StandardError:
				logging.exception("error matching device")

	def device_added(self, device_udi):
		mount_point = None
		device_name = None
		action = None
		try:
			for attempts in range(0,5):
				device = self.bus.get_object(self.HAL, device_udi)
				properties = device.GetAllProperties(dbus_interface="org.freedesktop.Hal.Device")
				action = self.action_for_device(properties)
				if not action:
					debug("'%s' has no action configured - ignoring" % (properties['info.product'],))
					return
				if not properties['volume.is_mounted']:
					if attempts == 4:
						logging.warn("timed out waiting for mount")
						return
					time.sleep(1)
				else:
					mount_point = str(properties['volume.mount_point'])
					break
		except KeyError, e:
			debug("device has no such key: %s" % (e,))
			return

		command = action(mount_point)
		if command:
			self.run_command(command)
	
	def run_command(self, cmd):
		debug("running command: %s" % (cmd,))
		proc = subprocess.Popen(cmd, stderr = subprocess.PIPE)
		_out, _err = proc.communicate()
		retcode = proc.returncode
		if retcode != 0:
			puts("Command `%s` finshed with exit code %s" % (cmd, retcode))
			puts(_err)


def get_properties(device_path):
	"""used for debugging, inspecting attached devices"""
	bus = dbus.SystemBus()
	device = bus.get_object('org.freedesktop.Hal', device_path)
	props = device.GetAllProperties(dbus_interface="org.freedesktop.Hal.Device")
	return dict(props)

def run():
	from dbus.mainloop.glib import DBusGMainLoop
	DBusGMainLoop(set_as_default=True)
	monitor = Monitor()
	loop = gobject.MainLoop()
	try:
		loop.run()
	except (KeyboardInterrupt, EOFError):
		loop.quit()

def main():
	cmd_parts = sys.argv[1:]
	if len(cmd_parts) > 1:
		print >> sys.stderr, "Usage: %s [-v]" % (sys.argv[0],)
		return 1
	if cmd_parts == ['-v']:
		DEBUG = True
	run()

if __name__ == '__main__':
	sys.exit(main())
